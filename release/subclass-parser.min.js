/**
 * SubclassParser - v0.1.0 - 2015-10-07
 * https://github.com/msdoom2011/subclass-parser
 *
 * Copyright (c) 2015 Dmitry Osipishin | msdoom2011@gmail.com
 */
!function(){"use strict";Subclass.Parser={},Subclass.Parser.Extension={},Subclass.Parser.ParserManager=function(){function a(a){a&&a instanceof Subclass.ModuleInstance||Subclass.Error.create("InvalidArgument").argument("the instance of module",!1).expected('an instance of class "Subclass.ModuleInstance"').received(a).apply(),this._moduleInstance=a,this._module=a.getModule(),this._parsers={};for(var c in b)b.hasOwnProperty(c)&&(this._parsers[c]=Subclass.Tools.createClassInstance(b[c],this),this._parsers[c]instanceof Subclass.Parser.ParserAbstract||Subclass.Error.create('Registered invalid parser. It should be instance of class "Subclass.Parser.ParserAbstract".'))}var b=[];return a.registerParser=function(a){"function"==typeof a&&a.getName||Subclass.Error.create('Trying to register invalid parser. It should be instance of class "Subclass.Parser.ParserAbstract".'),b[a.getName()]=a},a.getParser=function(a){return this.issetParser(a)||Subclass.Error.create('Trying to get non registered parser constructor named "'+a+'"'),b[a]},a.issetParser=function(a){return b.hasOwnProperty(a)},a.prototype={getModuleInstance:function(){return this._moduleInstance},getModule:function(){return this._module},get:function(a){return this.isset(a)||Subclass.Error.create('Trying to get non registered parser named "'+a+'"'),this._parsers[a]},isset:function(a){return this._parsers.hasOwnProperty(a)},remove:function(a){delete this._parsers[a]},parse:function(a){var b=this._parsers;for(var c in b)b.hasOwnProperty(c)&&(a=b[c].parse(a));return a}},a}(),Subclass.Parser.Extension.ModuleInstanceExtension=function(){function a(){a.$parent.apply(this,arguments)}a.$parent=Subclass.Extension,a.initialize=function(b){a.$parent.initialize.apply(this,arguments),b.getEvent("onInitialize").addListener(function(){this._parser=Subclass.Tools.createClassInstance(Subclass.Parser.ParserManager,this)})};var b=Subclass.ModuleInstance;return b.prototype.getParser=function(){return this._parser},Subclass.Module.onInitializeBefore(function(c,d){b=Subclass.Tools.buildClassConstructor(b),b.hasExtension(a)||b.registerExtension(a)}),a}(),Subclass.Parser.ParserAbstract=function(){function a(a){a&&a instanceof Subclass.Parser.ParserManager||Subclass.Error.create("InvalidArgument").argument("the parser manager instance",!1).expected('an instance of class "Subclass.Parser.ParserManager"').received(a).apply(),this._parserManager=a}return a.getName=function(){Subclass.Error.create("NotImplementedMethod").className("Subclass.Parser.ParserAbstract").method("getName",!0).apply()},a.prototype={getParserManager:function(){return this._parserManager},getModule:function(){return this.getParserManager().getModule()},parse:function(a){Subclass.Error.create("NotImplementedMethod").className("Subclass.Parser.ParserAbstract").method("parse").apply()}},a}(),Subclass.registerPlugin(function(){function a(){a.$parent.call(this)}return a.$parent=Subclass.SubclassPlugin,a.getName=function(){return"SubclassParser"},a.getDependencies=function(){return["SubclassInstance"]},a}())}();